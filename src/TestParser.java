/* Generated By:JavaCC: Do not edit this line. TestParser.java */
import nodes.*;
import java.io.*;

public class TestParser implements TestParserConstants {
  public static void main(String args []) throws ParseException, FileNotFoundException
  {
    TestParser parser = new TestParser(new FileInputStream("./src/input.txt"));
    TreeNode rootNode = parser.start();
    rootNode.execute();

  }

/** Start state function. It only contains a block  statement that returns a block node.* < EOF > is a token pre-defined in JavaCC that indicates the END of the file (meaning that there's no more input)*/
  static final public TreeNode start() throws ParseException {
  BlockNode block = new BlockNode();
    block = blockNode();
    jj_consume_token(0);
    {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

/** The block node is a node that contains multiple statements as children. Its execution runs the execute() function of each of its children in order.* To construct it, we accept multiple statements of types ifCondition, assignment and modification and add each new one as a child to the block node. Once there's no more input, we return the block node.*/
  static final public BlockNode blockNode() throws ParseException {
  BlockNode block = new BlockNode();
  TreeNode node;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        node = ifCondition();
        break;
      case TYPE:
        if (jj_2_1(2)) {
          node = assignment();
        } else if (jj_2_2(2)) {
          node = arrayAssign();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case OVERLOOP:
        node = loopOver();
        break;
      case VAR:
        node = modification();
        break;
      case WRITE:
        node = writeTo();
        break;
      case AS_LONG:
        node = asLong();
        break;
      case ITERATE:
        node = iterate();
        break;
      case SWITCH:
        node = caseStatment();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      block.addChild(node);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OVERLOOP:
      case IF:
      case WRITE:
      case AS_LONG:
      case ITERATE:
      case SWITCH:
      case TYPE:
      case VAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  static final public LoopOverNode loopOver() throws ParseException {
  LoopOverNode node = new LoopOverNode();
  TreeNode block;
  StringNode name, name2 = null;
  Token t1, t2;
    jj_consume_token(OVERLOOP);
    t1 = jj_consume_token(VAR);
    name = new StringNode(t1.image);
    node.addChild(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      t2 = jj_consume_token(VAR);
      name2 = new StringNode(t2.image);
      node.addChild(name2);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(QUOTATION);
    jj_consume_token(DOTS);
    block = blockNode();
    jj_consume_token(DOTS);
    node.addChild(block);
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/** The IfNode and ifCondition function defines the syntax of the IF statement.* It will contain two children: 1. The condition node. 2. A block node that will execute if the condition is true.*/
  static final public IfNode ifCondition() throws ParseException {
  TreeNode block = new BlockNode();
  IfNode ifNode = new IfNode();
  IfNode otherIfNode;
  IfNode otherNode;
  MultiCondNode condNode;
  MultiCondNode otherIfCondNode;
  Token t;
    jj_consume_token(IF);
    jj_consume_token(QUOTATION);
    condNode = multiCondition();
    jj_consume_token(QUOTATION);
    jj_consume_token(LET);
    jj_consume_token(DOTS);
    block = blockNode();
    jj_consume_token(DOTS);
    ifNode.addChild(condNode);
    ifNode.addChild(block);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OTHER_IF:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(OTHER_IF);
      jj_consume_token(QUOTATION);
      condNode = multiCondition();
      jj_consume_token(QUOTATION);
      jj_consume_token(LET);
      jj_consume_token(DOTS);
      block = blockNode();
      jj_consume_token(DOTS);
        ifNode.addChild(condNode);
        ifNode.addChild(block);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER:
      jj_consume_token(OTHER);
      jj_consume_token(DOTS);
      block = blockNode();
      jj_consume_token(DOTS);
        ifNode.addChild(block);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    {if (true) return ifNode;}
    throw new Error("Missing return statement in function");
  }

  static final public MultiCondNode multiCondition() throws ParseException {
  MultiCondNode multiCondNode = new MultiCondNode();
  ConditionNode cond1, cond2;
  Token t;
    cond1 = condition();
    multiCondNode.addChild(cond1);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGIC:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(LOGIC);
      cond2 = condition();
      multiCondNode.addChild(new StringNode(t.image));
      multiCondNode.addChild(cond2);
    }
    {if (true) return multiCondNode;}
    throw new Error("Missing return statement in function");
  }

/** The ConditionNode/ condition statement function defines the condition which is of 3 parts, the first operand, comparison operation and the second operand.*/
  static final public ConditionNode condition() throws ParseException {
  ConditionNode node = new ConditionNode();
  StringNode operationNode;
  ConstNode op1, op2;
  Token t1, t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      t1 = jj_consume_token(VAR);
      operationNode = string();
      node.addChild(new StringNode(t1.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        t2 = jj_consume_token(VAR);
        node.addChild(new StringNode(t2.image));
        break;
      case NUMBER:
        op1 = value();
        node.addChild(op1);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case NUMBER:
      op1 = value();
      operationNode = string();
      node.addChild(op1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        t1 = jj_consume_token(VAR);
        node.addChild(new StringNode(t1.image));
        break;
      case NUMBER:
        op2 = value();
        node.addChild(op2);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    node.addChild(operationNode);
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public CaseNode caseStatment() throws ParseException {
  CaseNode node = new CaseNode();
  TreeNode block;
  StringNode s;
  ConstNode x;
  Token t1, t2;
    jj_consume_token(SWITCH);
    jj_consume_token(OP_PARAN);
    t1 = jj_consume_token(VAR);
    jj_consume_token(ED_PARAN);
    jj_consume_token(DOTS);
    s = new StringNode(t1.image);
    node.addChild(s);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_BRACT:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(OP_BRACT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t2 = jj_consume_token(NUMBER);
        break;
      case STRING:
        t2 = jj_consume_token(STRING);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ED_BRACT);
      jj_consume_token(DOTS);
      block = blockNode();
      jj_consume_token(END);
      jj_consume_token(EOL);
      x = new ConstNode(t2.image);
      node.addChild(x);
      node.addChild(block);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE_END:
      jj_consume_token(CASE_END);
      block = blockNode();
      jj_consume_token(END);
      jj_consume_token(EOL);
      jj_consume_token(DOTS);
      s = new StringNode("[]:");
      node.addChild(s);
      node.addChild(block);
      {if (true) return node;}
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(DOTS);
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public AsLongNode asLong() throws ParseException {
  AsLongNode node = new AsLongNode();
  MultiCondNode multiNode;
  TreeNode block = new BlockNode();
    jj_consume_token(AS_LONG);
    jj_consume_token(QUOTATION);
    multiNode = multiCondition();
    jj_consume_token(QUOTATION);
    jj_consume_token(DOTS);
    block = blockNode();
    jj_consume_token(DOTS);
    node.addChild(multiNode);
    node.addChild(block);
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public IterateNode iterate() throws ParseException {
  IterateNode node = new IterateNode();
  TreeNode block = new BlockNode();
  ConstNode op1, op2;
  Token var;
    jj_consume_token(ITERATE);
    var = jj_consume_token(VAR);
    jj_consume_token(IN);
    op1 = value();
    jj_consume_token(TO);
    op2 = value();
    jj_consume_token(QUOTATION);
    jj_consume_token(LET);
    jj_consume_token(DOTS);
    block = blockNode();
    jj_consume_token(DOTS);
    node.addChild(new StringNode(var.image));
    node.addChild(op1);
    node.addChild(op2);
    node.addChild(block);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public StringNode string() throws ParseException {
  StringNode stringNode;
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      token = jj_consume_token(STRING);
      String str = token.image;
      if (str == null || str.length() < 3)
      {
        str = "";
      }
      else
      {
        str = str.substring(1, str.length() - 1);
      }
      stringNode = new StringNode(str);
      break;
    case OPERATION:
      token = jj_consume_token(OPERATION);
      stringNode = new StringNode(token.image);
      break;
    case ASSIGN:
      token = jj_consume_token(ASSIGN);
      stringNode = new StringNode(token.image);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return stringNode;}
    throw new Error("Missing return statement in function");
  }

/** AssignNode and assignment statement function define the assignment/declaratino statement.* It has three children: 1. Variable type. 2. Variable name. 3. Variable value.*/
  static final public AssignNode assignment() throws ParseException {
  AssignNode node = new AssignNode();
  ReadNode readNode = new ReadNode();
  Token t1, t2, t3 = null;
  boolean isVar = false, isRead = false;
    t1 = jj_consume_token(TYPE);
    t2 = jj_consume_token(VAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t3 = jj_consume_token(NUMBER);
        break;
      case STRING:
        t3 = jj_consume_token(STRING);
        break;
      case VAR:
        t3 = jj_consume_token(VAR);
                     isVar = true;
        break;
      case READ:
        jj_consume_token(READ);
                 isRead = true;
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
    StringNode typeNode = new StringNode(t1.image);
    StringNode nameNode = new StringNode(t2.image);
    node.addChild(typeNode);
    node.addChild(nameNode);
    if (t3 != null)
    {
      StringNode valueNode = new StringNode(t3.image);
      StringNode isVarNode = new StringNode(Boolean.toString(isVar));
      node.addChild(valueNode);
      node.addChild(isVarNode);
    } else if (isRead) {
      StringNode isVarNode = new StringNode(Boolean.toString(isVar));
      node.addChild(readNode);
      node.addChild(isVarNode);
    }

    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayNode arrayAssign() throws ParseException {
  ArrayNode arrayNode = new ArrayNode();
  ConstNode num;
  Token t1, t2, t3;
  boolean isSpecial = false;
    t1 = jj_consume_token(TYPE);
    arrayNode.addChild(new StringNode(t1.image));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_BRACT:
      jj_consume_token(OP_BRACT);
      num = value();
      jj_consume_token(ED_BRACT);
      t2 = jj_consume_token(VAR);
      jj_consume_token(ASSIGN);
      jj_consume_token(OP_BRACE);
      arrayNode.addChild(num);
      arrayNode.addChild(new StringNode(t2.image));
      arrayNode.addChild(new StringNode(Boolean.toString(isSpecial)));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t3 = jj_consume_token(STRING);
        arrayNode.addChild(new StringNode(t3.image));
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          t3 = jj_consume_token(STRING);
          arrayNode.addChild(new StringNode(t3.image));
        }
        break;
      case NUMBER:
        num = value();
        arrayNode.addChild(num);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          num = value();
          arrayNode.addChild(num);
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ED_BRACE);
      break;
    case OP_PARAN:
      jj_consume_token(OP_PARAN);
      num = value();
      jj_consume_token(ED_PARAN);
      t2 = jj_consume_token(VAR);
      jj_consume_token(ASSIGN);
      isSpecial = true;
      arrayNode.addChild(num);
      arrayNode.addChild(new StringNode(t2.image));
      arrayNode.addChild(new StringNode(Boolean.toString(isSpecial)));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t3 = jj_consume_token(STRING);
        arrayNode.addChild(new StringNode(t3.image));
        break;
      case NUMBER:
        num = value();
        arrayNode.addChild(num);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EOL);
    {if (true) return arrayNode;}
    throw new Error("Missing return statement in function");
  }

/** ModNode/modification statement function defines the modification statement which contains two children:* 1. The variable name that we need to modify. 2. The new value to be set to the variable.*/
  static final public ModNode modification() throws ParseException {
  ModNode mod = new ModNode();
  Token t1, t2 = null;
  boolean isVar = false, isOP = false, isRead = false;
    t1 = jj_consume_token(VAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t2 = jj_consume_token(NUMBER);
        break;
      case STRING:
        t2 = jj_consume_token(STRING);
        break;
      case VAR:
        t2 = jj_consume_token(VAR);
                     isVar = true;
        break;
      case READ:
        jj_consume_token(READ);
                 isRead = true;
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case INC:
    case DEC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
        t2 = jj_consume_token(INC);
        break;
      case DEC:
        t2 = jj_consume_token(DEC);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      isOP = true;
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EOL);
    StringNode nameNode = new StringNode(t1.image);
    mod.addChild(nameNode);
    if (isRead) {
      ReadNode valueNode = new ReadNode();
      mod.addChild(valueNode);
    } else {
      StringNode valueNode = new StringNode(t2.image);
      mod.addChild(valueNode);
    }
    StringNode isVarNode = new StringNode(Boolean.toString(isVar));
    mod.addChild(isVarNode);
    StringNode isOPNode = new StringNode(Boolean.toString(isOP));
    mod.addChild(isOPNode);
    {if (true) return mod;}
    throw new Error("Missing return statement in function");
  }

  static final public WriteNode writeTo() throws ParseException {
  WriteNode writeNode = new WriteNode();
  StringNode valueNode;
  boolean isVar;
  Token t;
    jj_consume_token(WRITE);
    jj_consume_token(OP_PARAN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      t = jj_consume_token(VAR);
      isVar = true;
      writeNode.addChild(new StringNode(Boolean.toString(isVar)));
      valueNode = new StringNode(t.image);
      writeNode.addChild(valueNode);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      isVar = false;
      writeNode.addChild(new StringNode(Boolean.toString(isVar)));
      valueNode = new StringNode(t.image);
      writeNode.addChild(valueNode);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_7;
      }
      jj_consume_token(CONCAT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        t = jj_consume_token(VAR);
        isVar = true;
        writeNode.addChild(new StringNode(Boolean.toString(isVar)));
        valueNode = new StringNode(t.image);
        writeNode.addChild(valueNode);
        break;
      case STRING:
        t = jj_consume_token(STRING);
        isVar = false;
        writeNode.addChild(new StringNode(Boolean.toString(isVar)));
        valueNode = new StringNode(t.image);
        writeNode.addChild(valueNode);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ED_PARAN);
    jj_consume_token(EOL);
    {if (true) return writeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ConstNode value() throws ParseException {
        Token token;
    token = jj_consume_token(NUMBER);
                        {if (true) return new ConstNode(token.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(OP_BRACT)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(OP_PARAN)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TestParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x5343000,0x5343000,0x20000,0x8000,0x4000,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x40000000,0x40000000,0x0,0x0,0x80000000,0x80000,0xc00,0xc00,0x0,0x8000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200,0x200,0x0,0x0,0x0,0x0,0x300,0x300,0x300,0x8,0x500,0x20,0x1c00,0x700,0x1000,0x0,0x0,0x500,0x500,0x8,0x700,0x0,0x1000,0x600,0x0,0x600,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TestParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TestParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TestParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TestParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TestParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TestParser(TestParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TestParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
